/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package GUI;

import java.awt.Component;
import java.util.ArrayList;
import java.util.Locale;
import javax.swing.JButton;
import javax.swing.JPanel;
import napakalaki.BadConsequence;
import napakalaki.Cultist;
import napakalaki.CultistPlayer;
import napakalaki.Napakalaki;
import napakalaki.Player;
import napakalaki.Treasure;

/**
 *
 * @author Rafa
 */
public class PlayerView extends javax.swing.JPanel {
    private Player playerModel;
    private Napakalaki napakalakiModel;
    private int numDiscard;
    
    public void setNapakalaki(Napakalaki n){
        napakalakiModel = n;
    }

    /**
     * Creates new form PlayerView
     */
    public PlayerView() {
        initComponents();
    }
    
    public void fillTreasurePanel (JPanel aPanel, ArrayList<Treasure> aList) {
        // Se elimina la información antigua
        aPanel.removeAll();
        // Se recorre la lista de tesoros construyendo y añadiendo sus vistas
        // al panel
        for (Treasure t : aList) {
            TreasureView aTreasureView = new TreasureView();
            aTreasureView.setTreasure (t);
            aTreasureView.setVisible (true);
            aPanel.add (aTreasureView);
        }
        // Se fuerza la actualización visual del panel
        aPanel.repaint();
        aPanel.revalidate();
    }
    
    public void setPlayer(Player p){
        playerModel = p;
        numDiscard = playerModel.getPendingBadConsequence().getnHiddenTreasures()
                + playerModel.getPendingBadConsequence().getnVisibleTreasures();
        name.setText(playerModel.getName());
        level.setText(Integer.toString(playerModel.getLevel()));
        pendingBadConsequenceView.setpendingBadConsequence(playerModel.getPendingBadConsequence());
        if(playerModel.isCultist()){
            Cultist myCultistCard = ((CultistPlayer) playerModel).getMyCultistCard();
            cultistPanel.setCultist(myCultistCard);
        }        
        cultistPanel.setVisible(true);
        if(playerModel.isDead()){
            dead.setText("Muerto");
        }
        else{
            dead.setText("Vivo");
        }
        fillTreasurePanel (visibleTreasures, playerModel.getVisibleTreasures());
        fillTreasurePanel (hiddenTreasures, playerModel.getHiddenTreasures());
        repaint();
    }
    
    public ArrayList<Treasure> getSelectedTreasures(JPanel aPanel){
        TreasureView tv;
        ArrayList<Treasure> output = new ArrayList();
        for(Component c: aPanel.getComponents()){
            tv = (TreasureView) c;
            if(tv.isSelected()){
                output.add(tv.getTreasure());
            }
        }
        return output;
    }

    public JButton getButtonBuyLevels() {
        return buttonBuyLevels;
    }

    public JButton getButtonDiscardTreasures() {
        return buttonDiscardTreasures;
    }

    public JButton getButtonMakeVisible() {
        return buttonMakeVisible;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        labelName = new javax.swing.JLabel();
        labelLevel = new javax.swing.JLabel();
        lableDead = new javax.swing.JLabel();
        level = new javax.swing.JTextField();
        dead = new javax.swing.JTextField();
        name = new javax.swing.JTextField();
        hiddenTreasures = new javax.swing.JPanel();
        visibleTreasures = new javax.swing.JPanel();
        buttonBuyLevels = new javax.swing.JButton();
        buttonDiscardTreasures = new javax.swing.JButton();
        buttonMakeVisible = new javax.swing.JButton();
        cultistPanel = new GUI.CultistView();
        pendingBadConsequenceView = new GUI.pendingBadConsequenceView();
        lableDead1 = new javax.swing.JLabel();
        combatLevel = new javax.swing.JTextField();

        setBackground(new java.awt.Color(204, 204, 204));
        setBorder(javax.swing.BorderFactory.createTitledBorder("Jugador"));

        labelName.setFont(new java.awt.Font("Verdana", 1, 13)); // NOI18N
        labelName.setText("Nombre");

        labelLevel.setFont(new java.awt.Font("Verdana", 1, 13)); // NOI18N
        labelLevel.setText("Nivel");

        lableDead.setFont(new java.awt.Font("Verdana", 1, 13)); // NOI18N
        lableDead.setText("Muerto");

        level.setEditable(false);
        level.setText("Nivel");

        dead.setEditable(false);
        dead.setText("Muerte");

        name.setEditable(false);
        name.setText("Nombre");

        hiddenTreasures.setBackground(new java.awt.Color(153, 102, 0));
        hiddenTreasures.setBorder(javax.swing.BorderFactory.createTitledBorder("Tesoros Ocultos"));

        visibleTreasures.setBackground(new java.awt.Color(153, 102, 0));
        visibleTreasures.setBorder(javax.swing.BorderFactory.createTitledBorder("Tesoros Visibles"));

        buttonBuyLevels.setText("Compar Niveles");
        buttonBuyLevels.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonBuyLevelsActionPerformed(evt);
            }
        });

        buttonDiscardTreasures.setText("Descartar Tesoros");
        buttonDiscardTreasures.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonDiscardTreasuresActionPerformed(evt);
            }
        });

        buttonMakeVisible.setText("Hacer Visibles Tesoros");
        buttonMakeVisible.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonMakeVisibleActionPerformed(evt);
            }
        });

        lableDead1.setFont(new java.awt.Font("Verdana", 1, 13)); // NOI18N
        lableDead1.setText("Combate");

        combatLevel.setEditable(false);
        combatLevel.setText("Nivel");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(visibleTreasures, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(hiddenTreasures, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(labelName)
                                    .addComponent(labelLevel, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lableDead)
                                    .addComponent(lableDead1))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(combatLevel, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(dead, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(level, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(name, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(9, 9, 9)
                                .addComponent(pendingBadConsequenceView, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cultistPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(buttonBuyLevels)
                                .addGap(18, 18, 18)
                                .addComponent(buttonDiscardTreasures, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(buttonMakeVisible, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelName)
                            .addComponent(name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelLevel)
                            .addComponent(level, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lableDead1)
                            .addComponent(combatLevel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(6, 6, 6)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lableDead)
                            .addComponent(dead, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(pendingBadConsequenceView, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(cultistPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(visibleTreasures, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(hiddenTreasures, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonBuyLevels)
                    .addComponent(buttonDiscardTreasures)
                    .addComponent(buttonMakeVisible))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void buttonBuyLevelsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonBuyLevelsActionPerformed
        ArrayList<Treasure> sellHidden = getSelectedTreasures(hiddenTreasures);
        ArrayList<Treasure> sellVisible = getSelectedTreasures(visibleTreasures);
        napakalakiModel.buyLevels(sellVisible, sellHidden);
        setPlayer(napakalakiModel.getCurrentPlayer());
    }//GEN-LAST:event_buttonBuyLevelsActionPerformed

    private void buttonDiscardTreasuresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonDiscardTreasuresActionPerformed
        if(!playerModel.getPendingBadConsequence().isEmpty()){
            ArrayList<Treasure> descartables = getSelectedTreasures(hiddenTreasures);
            //Me descarto los ocultos
            for(Treasure t: descartables){
                playerModel.discardHiddenTreasure(t);
                numDiscard--;
            }
            descartables.clear();
            descartables = getSelectedTreasures(visibleTreasures);
            //Me descarto los visibles
            for(Treasure t: descartables){
                playerModel.discardVisibleTreasure(t);
                numDiscard--;
            }
            setPlayer(napakalakiModel.getCurrentPlayer());
            if(numDiscard == 0)
                buttonMakeVisible.setEnabled(true);
        }
    }//GEN-LAST:event_buttonDiscardTreasuresActionPerformed

    private void buttonMakeVisibleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonMakeVisibleActionPerformed
        ArrayList<Treasure> selHidden = getSelectedTreasures(hiddenTreasures);
        for(Treasure t: selHidden){
            napakalakiModel.makeTreasureVisible(t);
        }
        setPlayer(napakalakiModel.getCurrentPlayer());
    }//GEN-LAST:event_buttonMakeVisibleActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonBuyLevels;
    private javax.swing.JButton buttonDiscardTreasures;
    private javax.swing.JButton buttonMakeVisible;
    private javax.swing.JTextField combatLevel;
    private GUI.CultistView cultistPanel;
    private javax.swing.JTextField dead;
    private javax.swing.JPanel hiddenTreasures;
    private javax.swing.JLabel labelLevel;
    private javax.swing.JLabel labelName;
    private javax.swing.JLabel lableDead;
    private javax.swing.JLabel lableDead1;
    private javax.swing.JTextField level;
    private javax.swing.JTextField name;
    private GUI.pendingBadConsequenceView pendingBadConsequenceView;
    private javax.swing.JPanel visibleTreasures;
    // End of variables declaration//GEN-END:variables
}
